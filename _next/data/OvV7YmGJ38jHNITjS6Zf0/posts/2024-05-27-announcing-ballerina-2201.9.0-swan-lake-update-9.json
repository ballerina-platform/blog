{"pageProps":{"frontmatter":{"layout":"blog-post","title":"Announcing Ballerina Swan Lake Update 9 (2201.9.0)","author":"Ballerina Team","published-date":"27 May 2024","status":"Published","socialmediaimage":"ballerina-generic-social-media-image-2023.png","permalink":"/posts/2024-05-27-announcing-ballerina-2201.9.0-swan-lake-update-9/"},"content":"\n<style>.cBlogContent p{white-space: break-spaces !important;}</style>\n\nWe are excited to announce the Ballerina Swan Lake Update 9 (2201.9.0) release, which adds new features and improvements to many areas, including data-mapping, JSON, XML, and SOAP handling, crypto, and build process as described below.\n\n## AI-assisted data mapping\n\nData mapping is a frequent but time-consuming task in integrations due to the number of mappings required for a typical integration project and the complexity of those mappings. In order to simplify this process, this Ballerina release introduces AI-assisted data mappings. Integration developers can select input and output data records and trigger the AI-assisted data mapping feature, which automatically maps fields using OpenAI. Once the AI-based mapping is completed, developers can manually update mappings if necessary.  \n\nFor more information, see <a href=\"https://ballerina.io/learn/vs-code-extension/implement-the-code/data-mapper/#automatic-datamapper-experimental\" target=\"_blank\">automated data mapper</a>.\n\n<img alt=\"AI data mapping\" src=\"/images/U9_AI_datamappingGIF.gif\">\n\n## Quantum-safe crypto algorithms\n\nAs an integration language, data security is a main priority of Ballerina. Therefore, in order to overcome possible weaknesses of traditional crypto algorithms against quantum computing, Ballerina adds support for quantum-safe crypto algorithms from this release. With this functionality, Ballerina programs can now use crypto algorithms such as ML-KEM-768, RSA-KEM-ML-KEM-768, and ML-DSA65 to encrypt and sign data.\n\nSee Ballerina <a href=\"https://central.ballerina.io/ballerina/crypto/latest\" target=\"_blank\">crypto package</a> for more information.\n\n## Improved JSON and XML handling\n\nWith this release, it is possible to navigate JSON data in Ballerina using JSONPath expressions. Complex data retrievals can be performed within the Ballerina code using this feature as follows:\n\n```ballerina\n// Use a JSONPath expression to extract the list of titles in the books array.\njson titles = check jsondata:read(books, `$..title`);\nio:println(titles);\n\n// Use a JSONPath expression to extract the list of published years for the \n// books that have a price value of more than 80.\njson years = check jsondata:read(books, `$..[?(@.price > 80)].year`);\nio:println(years);\n\n// Use a JSONPath expression to extract the total sum of the prices of the books.\njson sum = check jsondata:read(books, `$..price.sum()`);\nio:println(sum);\n```\n\nIn addition, the data projection feature enables the conversion of JSON or XML data into Ballerina records by specifying only the required fields from the source data. This is useful for extracting only the required information from very large JSON or XML messages, which are common in interactions with B2B and enterprise applications.\n\nSee <a href=\"https://ballerina.io/learn/by-example/jsonpath-expressions/\" target=\"_blank\">JSONPath</a> and <a href=\"https://ballerina.io/learn/by-example/json-to-record-with-projection/\" target=\"_blank\">JSON data projection</a> examples.\n\n## SOAP support\n\nThis release introduces support for invoking SOAP 1.1 and 1.2 endpoints with web services security policies. This enables Ballerina programs to communicate securely with SOAP services and, for example, expose SOAP services as REST endpoints.\n\nFor more details, see <a href=\"https://ballerina.io/learn/by-example/soap-client-send-receive/\" target=\"_blank\">SOAP client examples</a>.\n\n## Support for integrating code generation tools with the build process\n\nMany integration technologies, such as OpenAPI, gRPC, data access, and EDI, rely on code generation from schemas. For example, when using Ballerina in an OpenAPI project, developers usually generate REST clients and records from the OpenAPI schema and then write the rest of the Ballerina code by using the generated code. \n\nThe problem with this approach is that developers either have to store the generated code in a version control system, or they have to manually generate code each time before a build. With this release, Ballerina developers can overcome this problem by using the code generation capabilities integrated with the build process. Information required for code generation can be specified in the `Ballerina.toml` file. \n\nSee <a href=\"https://ballerina.io/learn/openapi-tool/#automate-client-generation\" target=\"_blank\">automated client generation in OpenAPI tool</a> for an example usage.\n\n## Bal persist - Ballerina record generation from database schemas\n\nBal persist greatly simplifies interactions with data stores by allowing Ballerina developers to work with usual Ballerina records for data access. However, in previous versions, developers had to start from Ballerina records and generate the data schema from that. With this release, the `bal persist` tool can introspect existing data schemas and generate Ballerina records to work with those schemas. This makes the `bal persist` applicable in almost all data access scenarios, whether starting with a new database or working with an existing one.\n\nSee <a href=\"https://ballerina.io/learn/persist-cli-tool/#generate-the-data-model-by-introspecting-an-existing-database-[experimental]\" target=\"_blank\">database introspection</a> for more information.\n\nSee the <a href=\"https://ballerina.io/downloads/swan-lake-release-notes/swan-lake-2201.9.0\" target=\"_blank\">release note</a> for a comprehensive overview of Swan Lake Update 9's new features and improvements. We encourage our community to explore these features and provide feedback. Your input is invaluable in shaping the future of Ballerina and ensuring it meets your needs.\n\nCheers to the Ballerina community and the bright future of it!\n","codes":"[[346064157,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// Use a JSONPath expression to extract the list of titles in the books array.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #0550AE\\\">json</span><span style=\\\"color: #24292F\\\"> titles </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> jsondata</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">read</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">books</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0A3069\\\">`$..title`</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">io</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">println</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">titles</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// Use a JSONPath expression to extract the list of published years for the </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// books that have a price value of more than 80.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #0550AE\\\">json</span><span style=\\\"color: #24292F\\\"> years </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> jsondata</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">read</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">books</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0A3069\\\">`$..[?(@.price &gt; 80)].year`</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">io</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">println</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">years</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// Use a JSONPath expression to extract the total sum of the prices of the books.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #0550AE\\\">json</span><span style=\\\"color: #24292F\\\"> sum </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> jsondata</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">read</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">books</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0A3069\\\">`$..price.sum()`</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">io</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">println</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">sum</span><span style=\\\"color: #24292F\\\">);</span></span></code></pre>\"]]","slug":"2024-05-27-announcing-ballerina-2201.9.0-swan-lake-update-9"},"__N_SSG":true}